#version 330 core

in FS_IN {
    mat3 TBN;
    vec3 FragPos;
    vec2 TexCoords;
} fs_in ;

uniform vec3 lightColor = vec3(1);
uniform vec3 lightPos;
uniform vec3 cameraPos;

uniform sampler2D tex;
uniform sampler2D normalMap;

out vec4 FragColor;


void main() {
    vec3 cameraDirection = normalize(cameraPos-fs_in.FragPos);
    vec3 lightDirection = normalize(lightPos - fs_in.FragPos);
    vec3 halfwayDir = normalize(lightDirection + cameraDirection);

    vec3 normal = texture(normalMap, fs_in.TexCoords).rgb;
    normal = normal * 2.0 - 1.0;   
    normal = normalize(fs_in.TBN * normal); 

    // Ambient
    float ambientStrength = 0.05;
    vec3 ambient = ambientStrength * lightColor;

    // Difuse
    float diff = max(dot(normal,lightDirection),0.0);
    vec3 diffuse = lightColor * diff;

    // Speculer
    float specularStrength = 2;
    float spec = pow(max(dot(normal,halfwayDir),0.0),128.0f);
    vec3 speculer = specularStrength * spec * lightColor;

    // Result
    vec4 material = pow(texture(tex,fs_in.TexCoords),vec4(2.2));
    FragColor = vec4(ambient + diffuse + speculer,1) * material;

    if (FragColor.w < 0.1)
        discard;

    FragColor = pow(FragColor,vec4(1/2.2));
}